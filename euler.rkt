#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.0.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wxmedia\0"
4 1 8 #"wximage\0"
2 0 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 30 #"(lib \"image-core.ss\" \"mrlib\")\0"
1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 69 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
48 #"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1           0 831 0 17 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 56 29 1 #"\n"
0 0 17 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 56 29 1 #"\n"
0 0 24 3 7 #"#reader"
0 0 22 3 1 #"("
0 0 14 3 3 #"lib"
0 0 56 3 1 #" "
0 0 19 3 25 #"\"htdp-advanced-reader.ss\""
0 0 56 3 1 #" "
0 0 19 3 6 #"\"lang\""
0 0 22 3 3 #")(("
0 0 14 3 7 #"modname"
0 0 56 3 1 #" "
0 0 14 3 5 #"euler"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"read-case-sensitive"
0 0 56 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"teachpacks"
0 0 56 3 1 #" "
0 0 22 3 3 #"())"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"htdp-settings"
0 0 56 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 2 #"#t"
0 0 56 3 1 #" "
0 0 14 3 11 #"constructor"
0 0 56 3 1 #" "
0 0 14 3 17 #"repeating-decimal"
0 0 56 3 1 #" "
0 0 20 3 2 #"#t"
0 0 56 3 1 #" "
0 0 20 3 2 #"#t"
0 0 56 3 1 #" "
0 0 14 3 4 #"none"
0 0 56 3 1 #" "
0 0 20 3 2 #"#f"
0 0 56 3 1 #" "
0 0 22 3 5 #"())))"
0 0 56 29 1 #"\n"
0 0 56 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"prime-sieve"
0 0 56 3 1 #" "
0 0 14 3 5 #"limit"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 56 29 1 #"\n"
0 0 56 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 56 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 56 3 1 #" "
0 0 14 3 3 #"lop"
0 0 56 3 1 #" "
0 0 14 3 3 #"l2g"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 56 29 1 #"\n"
0 0 56 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 56 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sqrt"
0 0 56 3 1 #" "
0 0 14 3 5 #"limit"
0 0 22 3 2 #"))"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 56 3 1 #" "
0 0 14 3 3 #"lop"
0 0 56 3 1 #" "
0 0 14 3 3 #"l2g"
0 0 22 3 2 #")]"
0 0 56 29 1 #"\n"
0 0 56 3 9 #"         "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 56 3 1 #" "
0 0 14 3 3 #"l2g"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 56 3 1 #" "
0 0 14 3 3 #"lop"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 56 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 2 #"))"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 56 3 1 #" "
0 0 14 3 1 #"n"
0 0 56 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 4 #"))))"
0 0 56 3 1 #" "
0 0 14 3 3 #"l2g"
0 0 22 3 6 #"))]))]"
0 0 56 29 1 #"\n"
0 0 56 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 56 3 1 #" "
0 0 20 3 1 #"2"
0 0 56 3 1 #" "
0 0 14 3 5 #"empty"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 56 3 1 #" "
0 0 14 3 5 #"limit"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 14 3 4 #"add1"
0 0 22 3 5 #")))))"
0 0 56 29 1 #"\n"
0 0 56 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"is-prime"
0 0 56 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"member"
0 0 56 3 1 #" "
0 0 14 3 1 #"n"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"prime-sieve"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 56 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 4 #"))))"
0 0 56 29 1 #"\n"
0 0 56 29 1 #"\n"
0 7        1303 56           0 0           0 216 0 14 3 7 #"Problem"
0 0 2 3 1 #" "
0 0 20 3 2 #"14"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"collatz"
0 0 2 3 1 #" "
0 0 14 3 7 #"initial"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"acc"
0 0 2 3 1 #" "
0 0 14 3 12 #"chain-length"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 14 3 12 #"chain-length"
0 0 22 3 2 #")]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 4 #"odd?"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 3 #"acc"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 14 3 12 #"chain-length"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 4 #")))]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 5 #"even?"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 3 #"acc"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 14 3 12 #"chain-length"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 6 #"))]))]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"acc"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 14 3 7 #"initial"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"find-longest"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"generator"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 2 3 1 #" "
0 0 14 3 8 #"best-num"
0 0 2 3 1 #" "
0 0 14 3 10 #"best-chain"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 2 3 1 #" "
0 0 20 3 7 #"1000000"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 8 #"best-num"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"collatz"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 10 #"best-chain"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 9 #"generator"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"collatz"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 3 #"))]"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"generator"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 8 #"best-num"
0 0 2 3 1 #" "
0 0 14 3 10 #"best-chain"
0 0 22 3 5 #")]))]"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 9 #"generator"
0 0 2 3 1 #" "
0 0 20 3 6 #"320001"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"find-longest"
0 0 22 3 1 #")"
0           0 0 0 56 29 1 #"\n"
0 0 56 29 1 #"\n"
0 7        1255 56           0 0           0 208 0 17 3 15
#";;;;;Problem 52"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"is-six-multiple?"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"quik-sort"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"string->list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 9 #"quik-sort"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"string->list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 5 #")))))"
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 14 3 3 #"num"
0 0 22 3 3 #"]))"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"quik-sort"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 4 #"piot"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 5 #"<piot"
0 0 2 29 1 #"\n"
0 0 2 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"<"
0 0 2 3 1 #" "
0 0 14 3 1 #"x"
0 0 2 3 1 #" "
0 0 14 3 4 #"piot"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 5 #">piot"
0 0 2 29 1 #"\n"
0 0 2 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #">"
0 0 2 3 1 #" "
0 0 14 3 1 #"x"
0 0 2 3 1 #" "
0 0 14 3 4 #"piot"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 3 #"))]"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"quik-sort"
0 0 2 3 1 #" "
0 0 14 3 5 #"<piot"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 14 3 4 #"piot"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 9 #"quik-sort"
0 0 2 3 1 #" "
0 0 14 3 5 #">piot"
0 0 22 3 6 #")))]))"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 2 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"char->integer"
0 0 2 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0           0 0 0 56 29 1 #"\n"
0 7        1615 56           0 0           0 268 0 17 3 12
#";;Problem 26"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"calculate-order"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"loop"
0 0 2 3 1 #" "
0 0 14 3 12 #"order-so-far"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"expt"
0 0 2 3 1 #" "
0 0 20 3 2 #"10"
0 0 2 3 1 #" "
0 0 14 3 12 #"order-so-far"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 14 3 12 #"order-so-far"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"loop"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 14 3 12 #"order-so-far"
0 0 22 3 6 #"))]))]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"loop"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 33 #";;list of all odd numbers to 1000"
0 0 2 29 1 #"\n"
0 0 17 3 54 #";(filter (lambda (n) (odd? n)) (build-list 1000 add1))"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 19 #"list-of-odd-numbers"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 2 3 1 #" "
0 0 20 3 3 #"499"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 5 #")))))"
0 0 2 3 1 #" "
0 0 17 3 12 #";;excludes 1"
0 0 2 29 1 #"\n"
0 0 17 3 50 #";;list of prime numbers to 1000, excluding 1 and 5"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 14 #"list-of-primes"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"is-prim"
0 0 14 3 1 #"e"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 4 #"))))"
0 0 2 3 1 #" "
0 0 14 3 19 #"list-of-odd-numbers"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"find-highest-order"
0 0 2 3 1 #" "
0 0 14 3 12 #"list-of-nums"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 11 #"cur-top-num"
0 0 2 3 1 #" "
0 0 14 3 20 #"highest-order-so-far"
0 0 2 3 1 #" "
0 0 14 3 9 #"list-left"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 2 3 1 #" "
0 0 14 3 9 #"list-left"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 11 #"cur-top-num"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"calculate-order"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 9 #"list-left"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 14 3 20 #"highest-order-so-far"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 9 #"list-left"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"calculate-order"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 9 #"list-left"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 2 3 1 #" "
0 0 14 3 9 #"list-left"
0 0 22 3 3 #"))]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 11 #"cur-top-num"
0 0 2 3 1 #" "
0 0 14 3 20 #"highest-order-so-far"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 2 3 1 #" "
0 0 14 3 9 #"list-left"
0 0 22 3 6 #"))]))]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 14 3 12 #"list-of-nums"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 18 #"find-highest-order"
0 0 2 3 1 #" "
0 0 14 3 14 #"list-of-primes"
0 0 22 3 1 #")"
0           0 0 0 56 29 1 #"\n"
0 7        1231 56           0 0           0 204 0 17 3 12
#";;Problem 45"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"is-hex"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 8 #"integer?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"quadratic-equation"
0 0 2 3 1 #" "
0 0 20 3 2 #"-2"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"is-pent"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 8 #"integer?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"quadratic-equation"
0 0 2 3 1 #" "
0 0 20 3 2 #"-3"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"quadratic-equation"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 1 #"b"
0 0 2 3 1 #" "
0 0 14 3 1 #"c"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 17 3 19 #"; ax^2 + bx + c = 0"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 2 #"-1"
0 0 2 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sqrt"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"expt"
0 0 2 3 1 #" "
0 0 14 3 1 #"b"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 1 #"c"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 107
(
 #";(filter (lambda (num) (and (is-hex num) (is-pent num))) (build-list"
 #" 16000000 (lambda (n) (+ 26000000 n))))"
) 0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 11 #"list-of-num"
0 0 2 3 1 #" "
0 0 20 3 5 #"10000"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 13 #"into-the-nums"
0 0 2 3 1 #" "
0 0 20 3 5 #"20000"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 11 #"list-of-hex"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 2 3 1 #" "
0 0 14 3 11 #"list-of-num"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"expt"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 14 3 13 #"into-the-nums"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 14 3 13 #"into-the-nums"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 5 #")))))"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"is-pent"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 14 3 11 #"list-of-hex"
0 0 22 3 1 #")"
0           0 0 0 56 29 1 #"\n"
0 7        2281 56           0 0           0 379 0 17 3 12
#";;Problem 35"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"multiple-of-1-to-10"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 2 #"or"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 3 #"]))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 105
(
 #";(filter (lambda (n) (is-prime n)) (filter (lambda (n) (multiple-of-"
 #"1-to-10 n)) (build-list 99999 add1)))"
) 0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"is-circular"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"number->list"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 12 #"string->list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list->number"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->number"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list->string"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"next-comb"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 12 #"list->number"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"number->list"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"number->list"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 6 #"))))))"
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 8 #"cur-comb"
0 0 2 3 1 #" "
0 0 14 3 11 #"total-combs"
0 0 2 3 1 #" "
0 0 14 3 12 #"combs-so-far"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 2 3 1 #" "
0 0 14 3 12 #"combs-so-far"
0 0 2 3 1 #" "
0 0 14 3 11 #"total-combs"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 8 #"is-prime"
0 0 2 3 1 #" "
0 0 14 3 8 #"cur-comb"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"next-comb"
0 0 2 3 1 #" "
0 0 14 3 8 #"cur-comb"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 11 #"total-combs"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 14 3 12 #"combs-so-far"
0 0 22 3 3 #"))]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 4 #"]))]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"number->list"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"is-circular"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"multiple-of-1-to-10"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 2 3 1 #" "
0 0 20 3 6 #"999989"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 2 #"11"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 7 #")))))))"
0           0 0 0 56 29 1 #"\n"
0 7        1315 56           0 0           0 218 0 17 3 12
#";;Problem 30"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 5 #"power"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"sum-of-5th-powers"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 10 #"sum-so-far"
0 0 2 3 1 #" "
0 0 14 3 12 #"string-to-go"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 5 #"zero?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-length"
0 0 2 3 1 #" "
0 0 14 3 12 #"string-to-go"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 2 3 1 #" "
0 0 14 3 10 #"sum-so-far"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 10 #"sum-so-far"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #"])]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 14 3 10 #"sum-so-far"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"expt"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->number"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"substring"
0 0 2 3 1 #" "
0 0 14 3 12 #"string-to-go"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 14 3 5 #"power"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 9 #"substring"
0 0 2 3 1 #" "
0 0 14 3 12 #"string-to-go"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-length"
0 0 2 3 1 #" "
0 0 14 3 12 #"string-to-go"
0 0 22 3 7 #")))]))]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"find-sum-of-5th-powers"
0 0 2 3 1 #" "
0 0 14 3 11 #"upper-bound"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"loop"
0 0 2 3 1 #" "
0 0 14 3 9 #"total-sum"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 2 3 1 #" "
0 0 14 3 11 #"upper-bound"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 14 3 9 #"total-sum"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"sum-of-5th-powers"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 3 #"))]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"loop"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 14 3 9 #"total-sum"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"sum-of-5th-powers"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 6 #"))]))]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"loop"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 22 #"find-sum-of-5th-powers"
0 0 2 3 1 #" "
0 0 20 3 8 #"10000000"
0 0 22 3 1 #")"
0           0 0 0 56 29 1 #"\n"
0 7        1495 56           0 0           0 248 0 2 29 1 #"\n"
0 0 17 3 11 #";Problem 37"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"find-truncatable"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"num-length"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-length"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"LS"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->number"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"substring"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"num-length"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"RS"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->number"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"substring"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"num-length"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 9 #"currentLS"
0 0 2 3 1 #" "
0 0 14 3 9 #"currentRS"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"num-length"
0 0 2 3 1 #" "
0 0 14 3 9 #"currentLS"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"is-prime"
0 0 2 3 1 #" "
0 0 14 3 9 #"currentLS"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 49 #"                                                 "
0 0 22 3 1 #"("
0 0 14 3 8 #"is-prime"
0 0 2 3 1 #" "
0 0 14 3 9 #"currentRS"
0 0 22 3 3 #"))]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 3 #"and"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"is-prime"
0 0 2 3 1 #" "
0 0 14 3 9 #"currentLS"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 8 #"is-prime"
0 0 2 3 1 #" "
0 0 14 3 9 #"currentRS"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"LS"
0 0 2 3 1 #" "
0 0 14 3 9 #"currentLS"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"RS"
0 0 2 3 1 #" "
0 0 14 3 9 #"currentRS"
0 0 22 3 3 #"))]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 4 #"]))]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"LS"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"RS"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 3 18 #"                  "
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 13 #"primes-to-110"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 2 3 1 #" "
0 0 14 3 8 #"is-prime"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 2 3 1 #" "
0 0 20 3 6 #"740000"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 2 #"10"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 5 #")))))"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 2 3 1 #" "
0 0 14 3 16 #"find-truncatable"
0 0 2 3 1 #" "
0 0 14 3 13 #"primes-to-110"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 17 3 52 #";(list 23 37 53 73 313 317 373 797 3137 3797 739397)"
0           0 0 0 56 29 1 #"\n"
0 0 56 29 1 #"\n"
0 7        1639 56           0 0           0 272 0 17 3 12
#";;Problem 28"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 2 3 1 #" "
0 0 20 3 3 #"500"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 4 #"))))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 2 3 1 #" "
0 0 20 3 3 #"500"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 4 #"))))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 2 3 1 #" "
0 0 20 3 3 #"500"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 2 #"10"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 4 #"))))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 2 3 1 #" "
0 0 20 3 3 #"500"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 6 #"))))))"
0           0 0 0 56 29 1 #"\n"
0 0 56 29 1 #"\n"
0 7        1117 56           0 0           0 185 0 17 3 12
#";;Problem 52"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"num->list"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->number"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 2 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 2 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 14 3 14 #"number->string"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sort"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 20 3 2 #"48"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 14 3 13 #"char->integer"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"string->list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 4 #"))))"
0 0 2 3 1 #" "
0 0 14 3 1 #"<"
0 0 22 3 5 #")))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"main-func"
0 0 2 3 1 #" "
0 0 14 3 5 #"start"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"num->list"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 9 #"num->list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 9 #"num->list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 9 #"num->list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 9 #"num->list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 9 #"num->list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 6 #"))]))]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 5 #"start"
0 0 22 3 3 #")))"
0           0 0 0 56 29 1 #"\n"
0 0 56 29 1 #"\n"
0 7        1129 56           0 0           0 187 0 17 3 12
#";;Problem 34"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"factorial"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"run-prod"
0 0 2 3 1 #" "
0 0 14 3 2 #"n0"
0 0 2 3 1 #" "
0 0 14 3 11 #"prod-so-far"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 14 3 2 #"n0"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 14 3 2 #"n0"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 11 #"prod-so-far"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"run-prod"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 2 3 1 #" "
0 0 14 3 2 #"n0"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 14 3 11 #"prod-so-far"
0 0 2 3 1 #" "
0 0 14 3 2 #"n0"
0 0 22 3 6 #"))]))]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 8 #"run-prod"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"num->list"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 20 3 2 #"48"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 14 3 13 #"char->integer"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"string->list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 5 #")))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"sum-of-factorial"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 14 3 9 #"factorial"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"num->list"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"sum-of-factorial"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 2 3 1 #" "
0 0 20 3 5 #"41000"
0 0 2 3 1 #" "
0 0 14 3 4 #"add1"
0 0 22 3 2 #"))"
0           0 0 0 56 29 1 #"\n"
0 7        1639 56           0 0           0 272 0 17 3 12
#";;Problem 12"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 5 #"a-max"
0 0 2 3 1 #" "
0 0 20 3 3 #"100"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 5 #"b-max"
0 0 2 3 1 #" "
0 0 20 3 3 #"100"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 5 #"a-min"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 5 #"b-min"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"get-all-powers"
0 0 2 3 1 #" "
0 0 14 3 5 #"power"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"expt"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 14 3 5 #"power"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 2 3 1 #" "
0 0 14 3 5 #"a-max"
0 0 2 3 1 #" "
0 0 14 3 5 #"a-min"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 14 3 5 #"a-min"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 5 #")))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 10 #"total-list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 14 3 14 #"get-all-powers"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 2 3 1 #" "
0 0 14 3 5 #"b-max"
0 0 2 3 1 #" "
0 0 14 3 5 #"b-min"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 14 3 5 #"b-min"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 5 #")))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"remove-duplicates"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 12 #"list-scanned"
0 0 2 3 1 #" "
0 0 14 3 10 #"list-to-go"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 2 3 1 #" "
0 0 14 3 10 #"list-to-go"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 12 #"list-scanned"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 10 #"list-to-go"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"reverse"
0 0 2 3 1 #" "
0 0 14 3 12 #"list-scanned"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 12 #"list-scanned"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 2 3 1 #" "
0 0 14 3 10 #"list-to-go"
0 0 22 3 3 #"))]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 2 3 1 #" "
0 0 14 3 12 #"list-scanned"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 10 #"list-to-go"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 2 3 1 #" "
0 0 14 3 10 #"list-to-go"
0 0 22 3 6 #"))]))]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"remove-duplicates"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sort"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 2 3 1 #" "
0 0 14 3 6 #"append"
0 0 2 3 1 #" "
0 0 14 3 5 #"empty"
0 0 2 3 1 #" "
0 0 14 3 10 #"total-list"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 1 #"<"
0 0 22 3 3 #")))"
0           0 0 0 56 29 1 #"\n"
0 7        2791 56           0 0           0 464 0 17 3 12
#";;Problem 12"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"is-tri"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 8 #"integer?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"quadratic-equation"
0 0 2 3 1 #" "
0 0 20 3 2 #"-1"
0 0 2 3 1 #" "
0 0 20 3 2 #"-1"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"quadratic-equation"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 1 #"b"
0 0 2 3 1 #" "
0 0 14 3 1 #"c"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 17 3 19 #"; ax^2 + bx + c = 0"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 2 #"-1"
0 0 2 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sqrt"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"expt"
0 0 2 3 1 #" "
0 0 14 3 1 #"b"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 1 #"c"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 11 #"list-of-tri"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 2 3 1 #" "
0 0 20 3 5 #"15000"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"expt"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"is-prime"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sqrt"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 5 #"zero?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 6 #"))]))]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 14 #"list-of-primes"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 2 3 1 #" "
0 0 14 3 8 #"is-prime"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 2 3 1 #" "
0 0 20 3 5 #"15000"
0 0 2 3 1 #" "
0 0 14 3 4 #"add1"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"get-num-divisors"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 17 #"list-of-exponents"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 2 3 1 #" "
0 0 14 3 12 #"cur-divisors"
0 0 2 3 1 #" "
0 0 14 3 18 #"cur-list-of-primes"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 2 3 1 #" "
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 2 3 1 #" "
0 0 14 3 17 #"list-of-exponents"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 14 3 12 #"cur-divisors"
0 0 22 3 5 #"))))]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 18 #"cur-list-of-primes"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 17 #"list-of-exponents"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 18 #"cur-list-of-primes"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 14 3 12 #"cur-divisors"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 18 #"cur-list-of-primes"
0 0 22 3 2 #")]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 3 #"and"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 18 #"cur-list-of-primes"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 2 3 1 #" "
0 0 14 3 12 #"cur-divisors"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 17 #"list-of-exponents"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 2 3 1 #" "
0 0 14 3 18 #"cur-list-of-primes"
0 0 22 3 3 #"))]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 2 3 1 #" "
0 0 14 3 17 #"list-of-exponents"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 14 3 12 #"cur-divisors"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 2 3 1 #" "
0 0 14 3 18 #"cur-list-of-primes"
0 0 22 3 6 #"))]))]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 5 #"empty"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 14 3 14 #"list-of-primes"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 20 3 3 #"576"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"get-num-divisors"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 14 3 11 #"list-of-tri"
0 0 22 3 1 #")"
0           0 0 0 56 29 1 #"\n"
0 0 17 3 13 #";;Problem 125"
0 0 56 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"is-palin?"
0 0 56 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 56 3 1 #" "
0 0 14 3 3 #"num"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->number"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 56 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 56 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 56 3 1 #" "
0 0 14 3 14 #"number->string"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"reverse"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 56 3 1 #" "
0 0 14 3 1 #"n"
0 0 56 3 1 #" "
0 0 20 3 2 #"48"
0 0 22 3 2 #"))"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 56 3 1 #" "
0 0 14 3 13 #"char->integer"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"string->list"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 56 11 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 10 #"))))))))))"
0 0 56 29 1 #"\n"
0 0 56 29 1 #"\n"
0 0 17 3 37 #";;Removes all numbers not palindromes"
0 0 56 29 1 #"\n"
0 0 17 3 47 #";;Removes are squares (for example, 484 = 22^2)"
0 0 56 29 1 #"\n"
0 0 17 3 91
(
 #";(filter (lambda (n) (and (not (integer? (sqrt n))) (is-palin? n))) "
 #"(build-list 1000 add1))"
) 0 0 56 29 1 #"\n"
0 0 56 29 1 #"\n"
0 7        2107 56           0 0           0 350 0 17 3 12
#";;Problem 21"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"is-prime"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sqrt"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 5 #"zero?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 6 #"))]))]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"get-lst-of-divisors"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"acc"
0 0 2 3 1 #" "
0 0 14 3 10 #"num-so-far"
0 0 2 3 1 #" "
0 0 14 3 15 #"divisors-so-far"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 10 #"num-so-far"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 15 #"divisors-so-far"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 5 #"zero?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 2 3 1 #" "
0 0 14 3 10 #"num-so-far"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 3 #"acc"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 14 3 10 #"num-so-far"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 2 3 1 #" "
0 0 14 3 15 #"divisors-so-far"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 14 3 10 #"num-so-far"
0 0 22 3 4 #")))]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"acc"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 14 3 10 #"num-so-far"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 15 #"divisors-so-far"
0 0 22 3 5 #")]))]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"acc"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"get-sum-of-divisors"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"get-lst-of-divisors"
0 0 2 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"func"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 10 #"sum-so-far"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 2 3 1 #" "
0 0 14 3 22 #"list-of-amicable-pairs"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 20 3 5 #"10000"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 22 #"list-of-amicable-pairs"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 2 #"[("
0 0 14 3 3 #"and"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"get-sum-of-divisors"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"get-sum-of-divisors"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 1 #">"
0 0 2 3 1 #" "
0 0 20 3 5 #"10000"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"get-sum-of-divisors"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"get-sum-of-divisors"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 2 3 1 #" "
0 0 14 3 10 #"sum-so-far"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 2 3 1 #" "
0 0 14 3 22 #"list-of-amicable-pairs"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 4 #")))]"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 14 3 10 #"sum-so-far"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 14 3 7 #"cur-num"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 22 #"list-of-amicable-pairs"
0 0 22 3 5 #")]))]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 3 #")))"
0           0 0 0 56 29 1 #"\n"
0 0 56 29 1 #"\n"
0 0 17 3 12 #";;Problem 23"
0 0 56 29 1 #"\n"
0 0 56 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"get-sum-of-divisors"
0 0 56 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 56 29 1 #"\n"
0 0 56 3 4 #"    "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"get-lst-of-divisors"
0 0 56 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 56 29 1 #"\n"
0 0 56 3 9 #"         "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"acc"
0 0 56 3 1 #" "
0 0 14 3 10 #"num-so-far"
0 0 56 3 1 #" "
0 0 14 3 15 #"divisors-so-far"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 56 29 1 #"\n"
0 0 56 3 14 #"              "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 56 3 1 #" "
0 0 20 3 1 #"2"
0 0 56 3 1 #" "
0 0 14 3 10 #"num-so-far"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 14 3 15 #"divisors-so-far"
0 0 22 3 1 #"]"
0 0 56 29 1 #"\n"
0 0 56 3 14 #"              "
0 0 22 3 2 #"[("
0 0 14 3 5 #"zero?"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 56 3 1 #" "
0 0 14 3 3 #"num"
0 0 56 3 1 #" "
0 0 14 3 10 #"num-so-far"
0 0 22 3 2 #"))"
0 0 56 29 1 #"\n"
0 0 56 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 3 #"acc"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 56 3 1 #" "
0 0 14 3 10 #"num-so-far"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 56 3 1 #" "
0 0 14 3 15 #"divisors-so-far"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 56 3 1 #" "
0 0 14 3 10 #"num-so-far"
0 0 22 3 4 #")))]"
0 0 56 29 1 #"\n"
0 0 56 3 14 #"              "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"acc"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 56 3 1 #" "
0 0 14 3 10 #"num-so-far"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 14 3 15 #"divisors-so-far"
0 0 22 3 5 #")]))]"
0 0 56 29 1 #"\n"
0 0 56 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 3 #"acc"
0 0 56 3 1 #" "
0 0 20 3 1 #"2"
0 0 56 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 4 #")))]"
0 0 56 3 1 #" "
0 0 17 3 52 #";; we leave out 1 here since it's always a divisor. "
0 0 56 29 1 #"\n"
0 0 56 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 56 3 1 #" "
0 0 14 3 1 #"+"
0 0 56 3 1 #" "
0 0 20 3 1 #"0"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"get-lst-of-divisors"
0 0 56 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 4 #"))))"
0 0 56 29 1 #"\n"
0 0 56 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"is-abundant?"
0 0 56 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"<"
0 0 56 3 1 #" "
0 0 14 3 3 #"num"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"get-sum-of-divisors"
0 0 56 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 4 #"))))"
0 0 56 3 1 #" "
0 0 17 3 23 #"; we add in the 1 here."
0 0 56 29 1 #"\n"
0 0 56 29 1 #"\n"
0 0 56 29 1 #"\n"
0 0 17 3 12 #";;Problem 58"
0 0 56 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"get-percentage"
0 0 56 3 1 #" "
0 0 14 3 3 #"len"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 56 3 1 #" "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 14 3 12 #"bottom-right"
0 0 56 3 1 #" "
0 0 56 29 1 #"\n"
0 0 56 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 56 3 1 #" "
0 0 14 3 3 #"len"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 56 3 1 #" "
0 0 20 3 1 #"1"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 56 3 1 #" "
0 0 20 3 1 #"4"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"expt"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 56 3 1 #" "
0 0 20 3 1 #"2"
0 0 56 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 56 29 1 #"\n"
0 0 56 3 26 #"                          "
0 0 56 3 41 #"                                         "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 56 3 1 #" "
0 0 20 3 1 #"4"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 56 3 1 #" "
0 0 20 3 1 #"2"
0 0 56 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 7 #")))))))"
0 0 56 29 1 #"\n"
0 0 56 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 14 3 8 #"top-left"
0 0 56 3 1 #" "
0 0 56 29 1 #"\n"
0 0 56 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 56 3 1 #" "
0 0 14 3 3 #"len"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 56 3 1 #" "
0 0 20 3 1 #"5"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 56 3 1 #" "
0 0 20 3 1 #"4"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"expt"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 56 3 1 #" "
0 0 20 3 1 #"2"
0 0 56 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 56 29 1 #"\n"
0 0 56 3 26 #"                          "
0 0 56 3 37 #"                                     "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 56 3 1 #" "
0 0 20 3 1 #"8"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 56 3 1 #" "
0 0 20 3 1 #"2"
0 0 56 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 7 #")))))))"
0 0 56 29 1 #"\n"
0 0 56 3 10 #"          "
0 0 56 29 1 #"\n"
0 0 56 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 14 3 11 #"bottom-left"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 56 3 1 #" "
0 0 14 3 3 #"len"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 56 3 1 #" "
0 0 20 3 1 #"3"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 56 3 1 #" "
0 0 20 3 1 #"4"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"expt"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 56 3 1 #" "
0 0 20 3 1 #"2"
0 0 56 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 56 3 1 #" "
0 0 20 3 1 #"6"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 56 3 1 #" "
0 0 20 3 1 #"2"
0 0 56 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 7 #")))))))"
0 0 56 29 1 #"\n"
0 0 56 3 10 #"          "
0 0 56 29 1 #"\n"
0 0 56 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 14 3 9 #"top-right"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 56 3 1 #" "
0 0 14 3 3 #"len"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 56 3 1 #" "
0 0 20 3 1 #"7"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 56 3 1 #" "
0 0 20 3 1 #"4"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"expt"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 56 3 1 #" "
0 0 20 3 1 #"2"
0 0 56 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 56 3 1 #" "
0 0 20 3 2 #"10"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 56 3 1 #" "
0 0 20 3 1 #"2"
0 0 56 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 7 #")))))))"
0 0 56 29 1 #"\n"
0 0 56 3 10 #"          "
0 0 56 29 1 #"\n"
0 0 56 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 14 3 4 #"orig"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 56 3 1 #" "
0 0 14 3 12 #"bottom-right"
0 0 56 3 1 #" "
0 0 14 3 8 #"top-left"
0 0 56 3 1 #" "
0 0 14 3 11 #"bottom-left"
0 0 56 3 1 #" "
0 0 14 3 9 #"top-right"
0 0 56 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"1"
0 0 22 3 4 #")))]"
0 0 56 29 1 #"\n"
0 0 56 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 56 3 1 #" "
0 0 20 3 3 #"100"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 56 3 1 #" "
0 0 14 3 8 #"is-prime"
0 0 56 3 1 #" "
0 0 14 3 4 #"orig"
0 0 22 3 2 #"))"
0 0 56 29 1 #"\n"
0 0 56 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 56 3 1 #" "
0 0 14 3 4 #"orig"
0 0 22 3 5 #")))))"
0 0 56 29 1 #"\n"
0 0 56 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 56 3 1 #" "
0 0 14 3 7 #"cur-len"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 56 29 1 #"\n"
0 0 56 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 56 3 1 #" "
0 0 20 3 2 #"10"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"get-percentage"
0 0 56 3 1 #" "
0 0 14 3 7 #"cur-len"
0 0 22 3 2 #"))"
0 0 56 3 1 #" "
0 0 14 3 7 #"cur-len"
0 0 22 3 1 #"]"
0 0 56 29 1 #"\n"
0 0 56 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"agg"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 56 3 1 #" "
0 0 20 3 1 #"2"
0 0 56 3 1 #" "
0 0 14 3 7 #"cur-len"
0 0 22 3 5 #"))]))"
0 0 56 29 1 #"\n"
0 0 56 29 1 #"\n"
0 0 17 3 36 #";(get-percentage 10000) gets 10.3447"
0 0 55 29 1 #"\n"
0 0 56 29 1 #"\n"
0 0 17 29 1 #"\n"
0           0
